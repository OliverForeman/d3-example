{"version":3,"sources":["utilities/kebabToWords.js","d3/axis/AxisStatic.jsx","d3/axis/Axis.jsx","d3/bar-chart/bars/BarsStatic.jsx","d3/bar-chart/bars/Bars.jsx","d3/bar-chart/graph/GraphStatic.jsx","d3/bar-chart/graph/Graph.jsx","d3/bar-chart/graph/GraphInteractive.jsx","utilities/getRandomInt.js","reusable/DisplayInteractions.jsx","utilities/useInputForm.js","controllers/BarChartController.jsx","d3/line-graph/lines/LinesStatic.jsx","d3/line-graph/lines/Lines.jsx","d3/line-graph/lines/LinesEntrance.jsx","d3/line-graph/graph/GraphStatic.jsx","d3/line-graph/graph/Graph.jsx","d3/line-graph/graph/GraphInteractive.jsx","utilities/arrayEquals.js","controllers/LineGraphController.jsx","d3/pie-chart/PieStatic.jsx","d3/pie-chart/Pie.jsx","d3/pie-chart/PieInteractive.jsx","controllers/PieChartController.jsx","app/App.js","serviceWorker.js","index.js"],"names":["str","split","map","word","slice","toUpperCase","join","AxisStatic","useEffect","drawGraph","margin","width","height","svg","d3","attr","append","xScale","domain","range","yScale","call","ticks","text","id","Axis","interval","clearInterval","timers","forEach","timer","clearTimeout","data","length","update","select","transition","duration","unshift","setTimeout","pop","setInterval","BarsStatic","colour","rangeRound","paddingInner","selectAll","enter","d","i","bandwidth","Bars","exit","remove","delay","GraphStatic","paddingOuter","Graph","GraphInteractive","min","max","Math","ceil","floor","random","DisplayInteractions","shouldDisplay","setData","textInput","initValue","useState","value","setValue","onChange","e","Number","target","useInputForm","displayInteractionsClass","className","type","onClick","event","preventDefault","getRandomInt","updatedData","push","index","findIndex","splice","reduce","acc","BarChartController","graphTypes","selectedOption","setSelectedOption","getButtonClassName","graphType","key","kebabToWords","getComponent","LinesStatic","line","x","y","curve","datum","Lines","oldScale","lineFlatOldScale","lineFlatNewScale","selection","LinesEntrance","node","getTotalLength","setOldScale","oldData","setOldData","arr1","arr2","every","val","LineGraphController","PieStatic","radius","dataReady","sort","pie","innerRadius","outerRadius","style","Pie","currentAngles","graphEnd","PI","arc","arcTween","interpolate","t","arcTweenRemove","end","Object","assign","startAngle","endAngle","each","attrTween","PieInteractive","PieChartController","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61db18dc.chunk.js","sourcesContent":["export default str => {\r\n  str = str.split('-');\r\n  str = str.map(word => word.slice(0, 1).toUpperCase() + word.slice(1));\r\n  return str.join(' ');\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n// See for examples of axis drawing -> https://www.d3-graph-gallery.com/graph/custom_axis.html\r\n\r\nconst AxisStatic = () => {\r\n  useEffect(() => {\r\n    drawGraph();\r\n  });\r\n\r\n  const margin = { top: 20, right: 20, bottom: 40, left: 60 };\r\n  const width = 960 - margin.left - margin.right;\r\n  const height = 500 - margin.top - margin.bottom;\r\n\r\n  // Draw the initial scales for a graph\r\n  const drawGraph = () => {\r\n    // Get the svg element\r\n    const svg = d3.select('#axis-static')\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n        .attr('transform', `translate(${margin.left}, ${margin.top})`);\r\n\r\n    // Creating the scaling for the x axis\r\n    const xScale = d3.scaleLinear()\r\n      .domain([0, 6]) // The range for the values to be written on the axis (0 to 6)\r\n      .range([0, width]); // The positioning of the axis (0 to width in px)\r\n\r\n    // Creating the scaling for the y axis\r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, 12]) // The range for the values to be written on the axis (0 to 12)\r\n      .range([height, 0]); // The positioning of the axis (height to 0 in px), reversed as drawing starts at the top left\r\n\r\n    // Create the x axis\r\n    svg.append('g')\r\n      .attr('transform', `translate(0, ${height})`) // Positioning of the axis\r\n      .call(d3.axisBottom(xScale) // Draw a bottom axis using our scaling\r\n        .ticks(6) // Set the approximate number of ticks to draw on the axis\r\n      );\r\n\r\n    // Create the y axis\r\n    svg.append('g')\r\n      // .attr('transform', 'translate(50, 0)') // Positioning of the axis\r\n      .call(d3.axisLeft(yScale)); // Draw a left axis using our scaling\r\n\r\n    // Add a label to the x axis\r\n    svg.append('text')\r\n      .attr('text-anchor', 'end') // Anchor end of text to positioning\r\n      .attr('x', width) // Set the x position for the text\r\n      .attr('y', height + margin.top + 20) // Set the y position for the text (height of graph + margin + distance to place below graph)\r\n      .text('X Axis'); // The writing for the title of the axis\r\n\r\n    // Add a label to the y axis\r\n    svg.append('text')\r\n      .attr('text-anchor', 'end') // Anchor end of text to positioning\r\n      .attr('transform', 'rotate(-90)') // Rotate the text so it's vertical\r\n      .attr('y', -margin.left + 20) // Move to margin then in (moves on x axis due to rotation)\r\n      .attr('x', -margin.top) // Move down from edge of graph (moves on y axis due to rotation)\r\n      .text('Y Axis'); // The writing for the title of the axis\r\n  };\r\n\r\n  return <svg id=\"axis-static\" />\r\n};\r\n\r\nexport default AxisStatic;\r\n","import React, { useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n// See for examples of axis drawing -> https://www.d3-graph-gallery.com/graph/custom_axis.html\r\n\r\nconst Axis = () => {\r\n  useEffect(() => {\r\n    drawGraph();\r\n\r\n    return () => {\r\n      if (interval) clearInterval(interval);\r\n      timers.forEach(timer => clearTimeout(timer));\r\n    };\r\n  });\r\n\r\n  // Stores timeout IDs to be cleared on component unmount\r\n  const timers = [];\r\n\r\n  const margin = { top: 20, right: 20, bottom: 40, left: 60 };\r\n  const width = 960 - margin.left - margin.right;\r\n  const height = 500 - margin.top - margin.bottom;\r\n\r\n  // Draw the initial scales for a graph\r\n  const drawGraph = () => {\r\n    const data = [12, 5, 6, 6, 9, 10];\r\n\r\n    // Get the svg element\r\n    const svg = d3.select('#axis')\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n        .attr('transform', `translate(${margin.left}, ${margin.top})`);\r\n\r\n    // Creating the scaling for the x axis\r\n    const xScale = d3.scaleLinear()\r\n      .domain([0, data.length]) // The range for the values to be written on the axis (0 to the number of data points)\r\n      .range([0, width]); // The positioning of the axis (0 to width in px)\r\n\r\n    // Creating the scaling for the y axis\r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, d3.max(data)]) // The range for the values to be written on the axis (0 to the largest data value)\r\n      .range([height, 0]); // The positioning of the axis (height to 0 in px), reversed as drawing starts at the top left\r\n\r\n    // Create the x axis\r\n    svg.append('g')\r\n      .attr('class', 'xAxis')\r\n      .attr('transform', `translate(0, ${height})`) // Positioning of the axis\r\n      .call(d3.axisBottom(xScale) // Draw a bottom axis using our scaling\r\n        .ticks(data.length) // Set the number of ticks to draw on the axis (approximately)\r\n      ); \r\n\r\n    // Create the y axis\r\n    svg.append('g')\r\n      .attr('class', 'yAxis')\r\n      .call(d3.axisLeft(yScale)); // Draw a left axis using our scaling\r\n\r\n    // Add a label to the x axis\r\n    svg.append('text')\r\n      .attr('text-anchor', 'end') // Anchor end of text to positioning\r\n      .attr('x', width) // Set the x position for the text\r\n      .attr('y', height + margin.top + 20) // Set the y position for the text (height of graph + margin + distance to place below graph)\r\n      .text('X Axis'); // The writing for the title of the axis\r\n\r\n    // Add a label to the y axis\r\n    svg.append('text')\r\n      .attr('text-anchor', 'end') // Anchor end of text to positioning\r\n      .attr('transform', 'rotate(-90)') // Rotate the text so it's vertical\r\n      .attr('y', -margin.left + 20) // Move to margin then in (moves on x axis due to rotation)\r\n      .attr('x', -margin.top) // Move down from edge of graph (moves on y axis due to rotation)\r\n      .text('Y Axis'); // The writing for the title of the axis\r\n  };\r\n\r\n  // Update the scales\r\n  const update = data => {\r\n    const svg = d3.select('#axis').select('g');\r\n\r\n    // Update the scaling with the new data\r\n    const xScale = d3.scaleLinear()\r\n      .domain([0, data.length])\r\n      .range([0, width]);\r\n\r\n    // Update the scaling with the new data\r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, d3.max(data)])\r\n      .range([height, 0]);\r\n\r\n    // Update the x axis\r\n    svg.select('.xAxis')\r\n      .transition() // Start transition for axis values\r\n      .duration(750) // Time in ms for transition\r\n      .call(d3.axisBottom(xScale) // Draw the axis according to the updated scaling\r\n        .ticks(data.length) // Set the number of ticks according the new dataset\r\n      );\r\n\r\n    // Update the y axis\r\n    svg.select('.yAxis')\r\n      .transition() // Start transition for axis values\r\n      .duration(750) // Time in ms for transition\r\n      .call(d3.axisLeft(yScale)); // Draw the axis according to the updated scaling\r\n  };\r\n\r\n  // Update the data set, increases data points\r\n  timers.unshift(setTimeout(() => {\r\n    timers.pop();\r\n    update([10, 2, 7, 4, 50, 20, 42, 24, 6, 4, 36, 8]);\r\n  }, 1000));\r\n\r\n  // Update the data set, reduces data points\r\n  timers.unshift(setTimeout(() => {\r\n    timers.pop();\r\n    update([5, 7, 2, 6, 9]);\r\n  }, 4000));\r\n\r\n  // Return to the original data set, increases data points\r\n  timers.unshift(setTimeout(() => {\r\n    timers.pop();\r\n    update([12, 5, 6, 6, 9, 10]);\r\n  }, 7000));\r\n\r\n  // Runs the animation on a loop\r\n  const interval = setInterval(() => {\r\n    update([10, 2, 7, 4, 50, 20, 42, 24, 6, 4, 36, 8]);\r\n\r\n    timers.unshift(setTimeout(() => {\r\n      timers.pop();\r\n      update([5, 7, 2, 6, 9]);\r\n    }, 3000));\r\n\r\n    timers.unshift(setTimeout(() => {\r\n      timers.pop();\r\n      update([12, 5, 6, 6, 9, 10]);\r\n    }, 6000));\r\n  }, 9000);\r\n\r\n  return <svg id=\"axis\" />\r\n};\r\n\r\nexport default Axis;\r\n","import React, { useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst BarsStatic = () => {\r\n  useEffect(() => {\r\n    drawGraph();\r\n  });\r\n\r\n  const margin = { top: 20, right: 20, bottom: 40, left: 60 };\r\n  const width = 960 - margin.left - margin.right;\r\n  const height = 500 - margin.top - margin.bottom;\r\n\r\n  // Does the initial drawing of the graph\r\n  const drawGraph = () => {\r\n    const data = [12, 5, 6, 6, 9, 10];\r\n    \r\n    // Create a colour scale to use for the bars\r\n    const colour = d3.scaleLinear()\r\n      .domain([1, d3.max(data)])\r\n      .range(['orange', 'purple']);\r\n\r\n    // Create a scaling for the x axis\r\n    const xScale = d3.scaleBand()\r\n      .domain(d3.range(data.length))\r\n      .rangeRound([0, width])\r\n      .paddingInner(0.08);\r\n\r\n    // Create a scaling for the y axis\r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, d3.max(data)])\r\n      .range([height, 0]);\r\n\r\n    // Setup the canvas\r\n    const svg = d3.select('#bars-static')\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n        .attr('transform', `translate(${margin.left}, ${margin.top})`);\r\n\r\n    // Draw initial bars\r\n    svg.selectAll('rect')\r\n      .data(data) // The starting data set\r\n      .enter() // Start adding new data points for any not currently mapped\r\n      .append('rect') // Append a rect element (a bar for the chart)\r\n      .attr('x', (d, i) => xScale(i)) // Position on the x axis according to the scaling\r\n      .attr('y', d => yScale(d)) // Position on the y axis according to the scaling\r\n      .attr('width', xScale.bandwidth()) // Set the bar width to an even amount\r\n      .attr('height', d => height - yScale(d)) // Set the height of the bar according to the scaling\r\n      .attr('fill', d => colour(d)); // Colour bar according to data value\r\n  };\r\n\r\n  return <svg id=\"bars-static\" />;\r\n};\r\n\r\nexport default BarsStatic;\r\n","import React, { useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst Bars = () => {\r\n  useEffect(() => {\r\n    drawGraph();\r\n\r\n    return () => {\r\n      if (interval) clearInterval(interval);\r\n      timers.forEach(timer => clearTimeout(timer));\r\n    };\r\n  });\r\n\r\n  // Stores timeout IDs to be cleared on component unmount\r\n  const timers = [];\r\n\r\n  const margin = { top: 20, right: 20, bottom: 40, left: 60 };\r\n  const width = 960 - margin.left - margin.right;\r\n  const height = 500 - margin.top - margin.bottom;\r\n\r\n  // Does the initial drawing of the graph\r\n  const drawGraph = () => {\r\n    const data = [12, 5, 6, 6, 9, 10];\r\n\r\n    // Create a colour scale for the bars\r\n    const colour = d3.scaleLinear()\r\n      .domain([1, d3.max(data)])\r\n      .range(['orange', 'purple']);\r\n\r\n    // Create a scaling for the x axis\r\n    const xScale = d3.scaleBand()\r\n      .domain(d3.range(data.length))\r\n      .rangeRound([0, width])\r\n      .paddingInner(0.08);\r\n\r\n    // Create a scaling for the y axis\r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, d3.max(data)])\r\n      .range([height, 0]);\r\n\r\n    // Setup the canvas\r\n    const svg = d3.select('#bars')\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n        .attr('transform', `translate(${margin.left}, ${margin.top})`);\r\n\r\n    // Draw initial bars\r\n    svg.selectAll('rect')\r\n      .data(data) // The starting data set\r\n      .enter() // Start adding new data points for any not currently mapped\r\n      .append('rect') // Append a rect element (a bar for the chart)\r\n      .attr('x', (d, i) => xScale(i)) // Position on the x axis according to the scaling\r\n      .attr('y', d => yScale(d)) // Position on the y axis according to the scaling\r\n      .attr('width', xScale.bandwidth()) // Set the bar width to an even amount\r\n      .attr('height', d => height - yScale(d)) // Set the height of the bar according to the scaling\r\n      .attr('fill', d => colour(d)); // Colour bar according to data value\r\n  };\r\n\r\n  // Used to update the bars of the graph\r\n  const update = data => {\r\n    const svg = d3.select('#bars').select('g');\r\n\r\n    // Update the colour scale for the new data\r\n    const colour = d3.scaleLinear()\r\n      .domain([1, d3.max(data)])\r\n      .range(['orange', 'purple']);\r\n\r\n    // Update the scaling with the new data\r\n    const xScale = d3.scaleBand()\r\n      .domain(d3.range(data.length))\r\n      .rangeRound([0, width])\r\n      .paddingInner(0.08);\r\n\r\n    // Update the scaling with the new data\r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, d3.max(data)])\r\n      .range([height, 0]);\r\n\r\n    // Handle removal of excess bars e.g. old dataset had 10 elements and new dataset has 5, we need to remove 5 bars from the canvas\r\n    svg.selectAll('rect')\r\n      .data(data) // Apply the new dataset\r\n      .exit() // Start handling any data not in the new dataset\r\n      .transition() // Start a transition for all attributes listed below\r\n      .duration(500) // Time in ms for transition to last\r\n      .attr('fill', 'whitesmoke') // Change colour to match background\r\n      .remove(); // Remove the element from the canvas\r\n\r\n    // Handle update of existing bars\r\n    svg.selectAll('rect')\r\n      .data(data) // Apply the new dataset\r\n      .transition() // Start a transition for all attributes before next transition\r\n      .duration(750) // Time in ms for transition\r\n      .attr('y', d => yScale(d)) // Set position on y axis according to scaling\r\n      .attr('height', d => height - yScale(d)) // Set bar height according to scaling\r\n      .attr('fill', d => colour(d)) // Colour the bar according to the data value\r\n      .transition() // Start a new transition for next set of attributes\r\n      .duration(750) // Time in ms for this transition\r\n      .delay(500) // Time in ms to delay the start of the transition\r\n      .attr('x', (d, i) => xScale(i)) // Set the position on the x axis according to scaling\r\n      .attr('width', xScale.bandwidth()); // Set the bar width to an even amount\r\n\r\n    // Handle adding new bars e.g. old dataset had 5 elements and new dataset has 10, we need to add 5 new bars\r\n    svg.selectAll('rect')\r\n      .data(data) // Apply the new dataset\r\n      .enter() // Start adding new data points for any not currently mapped\r\n      .append('rect') // Append a rect element (a bar for the chart)\r\n      .attr('x', (d, i) => xScale(i)) // Set the position on the x axis according to scaling\r\n      .attr('y', height) // Set the position on the y axis to be the bottom of the graph\r\n      .attr('width', xScale.bandwidth()) // Set the bar width to an even amount\r\n      .transition() // Start a transition for the next set of attributes\r\n      .duration(750) // Time in ms for this transition\r\n      .delay(1750) // Time in ms to delay the start of the transition\r\n      .attr('y', d => yScale(d)) // Set the position on the y axis according to scaling\r\n      .attr('height', d => height - yScale(d)) // Set the height of the bar according to scaling\r\n      .attr('fill', d => colour(d)); // Set the colour according to the data value\r\n  };\r\n\r\n  // Update the data set, increases data points\r\n  timers.unshift(setTimeout(() => {\r\n    timers.pop();\r\n    update([10, 2, 7, 4, 50, 20, 42, 24, 6, 4, 36, 8]);\r\n  }, 1000));\r\n\r\n  // Update the data set, reduces data points\r\n  timers.unshift(setTimeout(() => {\r\n    timers.pop();\r\n    update([5, 7, 2, 6, 9]);\r\n  }, 4000));\r\n\r\n  // Return to the original data set\r\n  timers.unshift(setTimeout(() => {\r\n    timers.pop();\r\n    update([12, 5, 6, 6, 9, 10]);\r\n  }, 7000));\r\n\r\n  // Runs the animation on a loop\r\n  const interval = setInterval(() => {\r\n    update([10, 2, 7, 4, 50, 20, 42, 24, 6, 4, 36, 8]);\r\n\r\n    timers.unshift(setTimeout(() => {\r\n      timers.pop();\r\n      update([5, 7, 2, 6, 9]);\r\n    }, 3000));\r\n\r\n    timers.unshift(setTimeout(() => {\r\n      timers.pop();\r\n      update([12, 5, 6, 6, 9, 10]);\r\n    }, 6000));\r\n  }, 9500);\r\n\r\n  return <svg id=\"bars\" />;\r\n};\r\n\r\nexport default Bars;\r\n","import React, { useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst GraphStatic = () => {\r\n  useEffect(() => {\r\n    drawGraph();\r\n  });\r\n\r\n  const margin = { top: 20, right: 20, bottom: 40, left: 60 };\r\n  const width = 960 - margin.left - margin.right;\r\n  const height = 500 - margin.top - margin.bottom;\r\n\r\n  const drawGraph = () => {\r\n    const data = [12, 5, 6, 6, 9, 10];\r\n\r\n    // Create a colour scale for the bars\r\n    const colour = d3.scaleLinear()\r\n      .domain([1, d3.max(data)])\r\n      .range(['orange', 'purple']);\r\n\r\n    // Select a translated graphics tag for drawing the elements within\r\n    const svg = d3.select('#bars-graph-static')\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n        .attr('transform', `translate(${margin.left}, ${margin.top})`);\r\n\r\n    // SCALES\r\n\r\n    // Create a scaling for the x axis\r\n    const xScale = d3.scaleBand()\r\n      .domain(d3.range(data.length))\r\n      .range([0, width])\r\n      .paddingInner(0.05)\r\n      .paddingOuter(0.05);\r\n\r\n    // Create a scaling for the y axis\r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, d3.max(data)])\r\n      .range([height, 0]);\r\n\r\n    // AXIS\r\n\r\n    // Create the x axis\r\n    svg.append('g')\r\n      .attr('transform', `translate(0, ${height})`)\r\n      .call(d3.axisBottom(xScale)\r\n        .ticks(data.length) // Give the approximate number of ticks to be drawn\r\n      );\r\n\r\n    // Create the y axis\r\n    svg.append('g')\r\n      .call(d3.axisLeft(yScale));\r\n\r\n    // Add text to the x axis\r\n    svg.append('text')\r\n      .attr('text-anchor', 'end')\r\n      .attr('x', width)\r\n      .attr('y', height + margin.top + 20)\r\n      .text('X Axis');\r\n\r\n    // Add text to the y axis\r\n    svg.append('text')\r\n      .attr('text-anchor', 'end')\r\n      .attr('transform', 'rotate(-90)')\r\n      .attr('y', -margin.left + 20)\r\n      .attr('x', -margin.top)\r\n      .text('Y Axis');\r\n\r\n    // BARS\r\n\r\n    // Create the bars for the bar chart\r\n    svg.selectAll('rect')\r\n      .data(data)\r\n      .enter()\r\n      .append('rect')\r\n      .attr('x', (d, i) => xScale(i))\r\n      .attr('y', d => yScale(d))\r\n      .attr('width', xScale.bandwidth()) // Gives all bars an equal width\r\n      .attr('height', d => height - yScale(d))\r\n      .attr('fill', d => colour(d)); // Set colour according to data value\r\n  };\r\n\r\n  return <svg id=\"bars-graph-static\" />\r\n};\r\n\r\nexport default GraphStatic;\r\n","import React, { useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst Graph = () => {\r\n  useEffect(() => {\r\n    drawGraph();\r\n\r\n    return () => {\r\n      if (interval) clearInterval(interval);\r\n      timers.forEach(timer => clearTimeout(timer));\r\n    };\r\n  });\r\n\r\n  // Stores timeout IDs to be cleared on component unmount\r\n  const timers = [];\r\n\r\n  const margin = { top: 20, right: 20, bottom: 40, left: 60 };\r\n  const width = 960 - margin.left - margin.right;\r\n  const height = 500 - margin.top - margin.bottom;\r\n\r\n  const drawGraph = () => {\r\n    const data = [12, 5, 6, 6, 9, 10];\r\n\r\n    // Select a translated graphics tag for drawing the elements within\r\n    const svg = d3.select('#bars-graph')\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n        .attr('transform', `translate(${margin.left}, ${margin.top})`);\r\n\r\n    // Create a colour scale for the bars\r\n    const colour = d3.scaleLinear()\r\n      .domain([1, d3.max(data)])\r\n      .range(['orange', 'purple']);\r\n\r\n    // SCALES\r\n\r\n    // Create a scaling for the x axis\r\n    const xScale = d3.scaleBand()\r\n      .domain(d3.range(data.length))\r\n      .range([0, width])\r\n      .paddingInner(0.05)\r\n      .paddingOuter(0.05);\r\n\r\n    // Create a scaling for the y axis\r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, d3.max(data)])\r\n      .range([height, 0]);\r\n\r\n    // AXIS\r\n\r\n    // Create the x axis\r\n    svg.append('g')\r\n      .attr('class', 'xAxis') // Add a class so we can select it later\r\n      .attr('transform', `translate(0, ${height})`)\r\n      .call(d3.axisBottom(xScale)\r\n        .ticks(data.length) // Give the approximate number of ticks to be drawn\r\n      );\r\n\r\n    // Create the y axis\r\n    svg.append('g')\r\n      .attr('class', 'yAxis') // Add a class so we can select it later\r\n      .call(d3.axisLeft(yScale));\r\n\r\n    // Add text to the x axis\r\n    svg.append('text')\r\n      .attr('text-anchor', 'end')\r\n      .attr('x', width)\r\n      .attr('y', height + margin.top + 20)\r\n      .text('X Axis');\r\n\r\n    // Add text to the y axis\r\n    svg.append('text')\r\n      .attr('text-anchor', 'end')\r\n      .attr('transform', 'rotate(-90)')\r\n      .attr('y', -margin.left + 20)\r\n      .attr('x', -margin.top)\r\n      .text('Y Axis');\r\n\r\n    // BARS\r\n\r\n    // Create the bars for the bar chart\r\n    svg.selectAll('rect')\r\n      .data(data)\r\n      .enter()\r\n      .append('rect')\r\n      .attr('x', (d, i) => xScale(i))\r\n      .attr('y', d => yScale(d))\r\n      .attr('width', xScale.bandwidth()) // Gives the bars an equal width\r\n      .attr('height', d => height - yScale(d))\r\n      .attr('fill', d => colour(d)); // Set colour according to data value\r\n  };\r\n\r\n  // Used to update the entire bar chart\r\n  const update = data => {\r\n    const svg = d3.select('#bars-graph').select('g');\r\n\r\n    // Update the colour scale for the new data\r\n    const colour = d3.scaleLinear()\r\n      .domain([1, d3.max(data)])\r\n      .range(['orange', 'purple']);\r\n\r\n    // SCALES\r\n\r\n    // Update the x axis scaling for the new data\r\n    const xScale = d3.scaleBand()\r\n      .domain(d3.range(data.length))\r\n      .range([0, width])\r\n      .paddingInner(0.05)\r\n      .paddingOuter(0.05);\r\n\r\n    // Update the y axis scaling for the new data\r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, d3.max(data)])\r\n      .range([height, 0]);\r\n\r\n    // AXIS\r\n\r\n    // Update the x axis\r\n    svg.select('.xAxis')\r\n      .transition() // Start a transition for the given duration\r\n      .duration(750)\r\n      .delay(500)\r\n      .call(d3.axisBottom(xScale) // Draw with the new scaling\r\n        .ticks(data.length) // Update the number of ticks to display\r\n      );\r\n\r\n    // Update the y axis\r\n    svg.select('.yAxis')\r\n      .transition() // Start a transition for the given duration\r\n      .duration(750)\r\n      .delay(1250)\r\n      .call(d3.axisLeft(yScale)); // Draw with the new scaling\r\n\r\n    // BARS\r\n\r\n    // Handle the removal of removed data points/bars\r\n    svg.selectAll('rect')\r\n      .data(data) // Apply the new dataset\r\n      .exit() // Start handling data points not in the new dataset\r\n      .transition() // Start a transition for the given duration\r\n      .duration(500)\r\n      .attr('fill', 'whitesmoke')\r\n      .remove(); // Remove the element from the canvas\r\n\r\n    // Handle the update of existing data points/bars\r\n    svg.selectAll('rect')\r\n      .data(data) // Apply the new dataset\r\n      .transition() // Start another transition for the given duration, starting after the delay\r\n      .duration(750)\r\n      .delay(500)\r\n      .attr('x', (d, i) => xScale(i))\r\n      .attr('width', xScale.bandwidth())\r\n      .transition() // Start a transition for the given duration\r\n      .duration(750)\r\n      .attr('y', d => yScale(d))\r\n      .attr('height', d => height - yScale(d))\r\n      .attr('fill', d => colour(d));\r\n\r\n    // Handle the adding of new data points/bars\r\n    svg.selectAll('rect')\r\n      .data(data) // Apply the new dataset\r\n      .enter() // Start handling the new data points\r\n      .append('rect') // Add new rect elements for the new data values\r\n      .attr('x', (d, i) => xScale(i))\r\n      .attr('y', height)\r\n      .attr('width', xScale.bandwidth())\r\n      .transition()\r\n      .duration(750)\r\n      .delay(1250)\r\n      .attr('y', d => yScale(d))\r\n      .attr('height', d => height - yScale(d))\r\n      .attr('fill', d => colour(d));\r\n  };\r\n\r\n  // Update the data set, increases data points\r\n  timers.unshift(setTimeout(() => {\r\n    timers.pop();\r\n    update([10, 2, 7, 4, 50, 20, 42, 24, 6, 4, 36, 8]);\r\n  }, 1000));\r\n\r\n  // Update the data set, reduces data points\r\n  timers.unshift(setTimeout(() => {\r\n    timers.pop();\r\n    update([5, 7, 2, 6, 9]);\r\n  }, 4000));\r\n\r\n  // Return to the original data set\r\n  timers.unshift(setTimeout(() => {\r\n    timers.pop();\r\n    update([12, 5, 6, 6, 9, 10]);\r\n  }, 7000));\r\n\r\n  // Runs the animation on a loop\r\n  const interval = setInterval(() => {\r\n    update([10, 2, 7, 4, 50, 20, 42, 24, 6, 4, 36, 8]);\r\n\r\n    timers.unshift(setTimeout(() => {\r\n      timers.pop();\r\n      update([5, 7, 2, 6, 9]);\r\n    }, 3000));\r\n\r\n    timers.unshift(setTimeout(() => {\r\n      timers.pop();\r\n      update([12, 5, 6, 6, 9, 10]);\r\n    }, 6000));\r\n  }, 9500);\r\n\r\n  return <svg id=\"bars-graph\" />\r\n};\r\n\r\nexport default Graph;\r\n","import React, { useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst GraphInteractive = ({ data }) => {\r\n  useEffect(() => {\r\n    drawGraph();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    update(data);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [data]);\r\n\r\n  const margin = { top: 20, right: 20, bottom: 40, left: 60 };\r\n  const width = 960 - margin.left - margin.right;\r\n  const height = 500 - margin.top - margin.bottom;\r\n\r\n  const drawGraph = () => {\r\n    const svg = d3.select('#bars-graph-interactive')\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n        .attr('transform', `translate(${margin.left}, ${margin.top})`);\r\n\r\n    const xScale = d3.scaleBand()\r\n      .domain(d3.range(data.length))\r\n      .range([0, width])\r\n      .paddingInner(0.05)\r\n      .paddingOuter(0.05);\r\n\r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, d3.max(data)])\r\n      .range([height, 0]);\r\n\r\n    svg.append('g')\r\n      .attr('class', 'xAxis')\r\n      .attr('transform', `translate(0, ${height})`)\r\n      .call(d3.axisBottom(xScale)\r\n        .ticks(data.length)\r\n      );\r\n\r\n    svg.append('g')\r\n      .attr('class', 'yAxis')\r\n      .call(d3.axisLeft(yScale));\r\n\r\n    svg.append('text')\r\n      .attr('text-anchor', 'end')\r\n      .attr('x', width)\r\n      .attr('y', height + margin.top + 20)\r\n      .text('X Axis');\r\n\r\n    svg.append('text')\r\n      .attr('text-anchor', 'end')\r\n      .attr('transform', 'rotate(-90)')\r\n      .attr('y', -margin.left + 20)\r\n      .attr('x', -margin.top)\r\n      .text('Y Axis');\r\n  };\r\n\r\n  const update = data => {\r\n    const svg = d3.select('#bars-graph-interactive').select('g');\r\n\r\n    const colour = d3.scaleLinear()\r\n      .domain([1, d3.max(data)])\r\n      .range(['orange', 'purple']);\r\n\r\n    const xScale = d3.scaleBand()\r\n      .domain(d3.range(data.length))\r\n      .range([0, width])\r\n      .paddingInner(0.05)\r\n      .paddingOuter(0.05);\r\n\r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, d3.max(data)])\r\n      .range([height, 0]);\r\n\r\n    svg.select('.xAxis')\r\n      .transition()\r\n      .duration(750)\r\n      .delay(500)\r\n      .call(d3.axisBottom(xScale)\r\n        .ticks(data.length)\r\n      );\r\n\r\n    svg.select('.yAxis')\r\n      .transition()\r\n      .duration(750)\r\n      .delay(1250)\r\n      .call(d3.axisLeft(yScale));\r\n\r\n    svg.selectAll('rect')\r\n      .data(data)\r\n      .exit()\r\n      .transition()\r\n      .duration(500)\r\n      .attr('fill', 'white')\r\n      .remove();\r\n\r\n    svg.selectAll('rect')\r\n      .data(data)\r\n      .transition()\r\n      .duration(750)\r\n      .delay(500)\r\n      .attr('x', (d, i) => xScale(i))\r\n      .attr('width', xScale.bandwidth())\r\n      .transition()\r\n      .duration(750)\r\n      .attr('y', d => yScale(d))\r\n      .attr('height', d => height - yScale(d))\r\n      .attr('fill', d => colour(d));\r\n\r\n    svg.selectAll('rect')\r\n      .data(data)\r\n      .enter()\r\n      .append('rect')\r\n      .attr('x', (d, i) => xScale(i))\r\n      .attr('y', height)\r\n      .attr('width', xScale.bandwidth())\r\n      .transition()\r\n      .duration(750)\r\n      .delay(1250)\r\n      .attr('y', d => yScale(d))\r\n      .attr('height', d => height - yScale(d))\r\n      .attr('fill', d => colour(d));\r\n  };\r\n\r\n  return <svg id=\"bars-graph-interactive\" />\r\n};\r\n\r\nexport default GraphInteractive;\r\n","export default (min, max) => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n};\r\n","import React from 'react';\r\nimport useInputForm from '../utilities/useInputForm';\r\nimport getRandomInt from '../utilities/getRandomInt';\r\n\r\nconst DisplayInteractions = ({ shouldDisplay, data, setData }) => {\r\n  const textInput = useInputForm(0);\r\n  \r\n  const addNumberHandler = event => {\r\n    event.preventDefault();\r\n    setData([...data, textInput.value]);\r\n  };\r\n\r\n  const addRandomNumber = () => {\r\n    setData([...data, getRandomInt(1, 51)]);\r\n  };\r\n\r\n  const addRandomNumbers = () => {\r\n    const updatedData = [...data];\r\n    for (let i = 0; i < textInput.value; i += 1) updatedData.push(getRandomInt(1, 51));\r\n    setData(updatedData);\r\n  };\r\n\r\n  const removeNumberHandler = () => {\r\n    const updatedData = [...data];\r\n    const index = updatedData.findIndex(value => value === textInput.value);\r\n    if (index > -1) updatedData.splice(index, 1);\r\n\r\n    setData(updatedData);\r\n  };\r\n\r\n  const removeAllHandler = () => {\r\n    const updatedData = [...data].reduce((acc, value) => {\r\n      if (value !== textInput.value) acc.push(value);\r\n      return acc;\r\n    }, []);\r\n\r\n    setData(updatedData);\r\n  };\r\n\r\n  const clearHandler = () => {\r\n    setData([]);\r\n  };\r\n\r\n  const displayInteractionsClass = `display-interactions${shouldDisplay ? '' : ' hide'}`;\r\n\r\n  return (\r\n    <div className={displayInteractionsClass}>\r\n      <form>\r\n        <input type=\"number\" min=\"0\" {...textInput} />\r\n        <button type=\"submit\" onClick={addNumberHandler}>Add</button>\r\n        <button type=\"button\" onClick={addRandomNumber}>Add Random</button>\r\n        <button type=\"button\" onClick={addRandomNumbers}>Add <i>X</i> Random</button>\r\n        <button type=\"button\" onClick={removeNumberHandler}>Remove</button>\r\n        <button type=\"button\" onClick={removeAllHandler}>Remove All</button>\r\n        <button type=\"button\" onClick={clearHandler}>Clear</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayInteractions;\r\n","import { useState } from 'react';\r\n\r\nexport default initValue => {\r\n  const [value, setValue] = useState(initValue);\r\n\r\n  const handleValueChange = e => setValue(Number(e.target.value));\r\n\r\n  return {\r\n    value,\r\n    onChange: handleValueChange\r\n  };\r\n};\r\n","import React, { useState } from 'react';\r\nimport kebabToWords from '../utilities/kebabToWords';\r\nimport AxisStatic from '../d3/axis/AxisStatic';\r\nimport Axis from '../d3/axis/Axis';\r\nimport BarsStatic from '../d3/bar-chart/bars/BarsStatic';\r\nimport Bars from '../d3/bar-chart/bars/Bars';\r\nimport GraphStatic from '../d3/bar-chart/graph/GraphStatic';\r\nimport Graph from '../d3/bar-chart/graph/Graph';\r\nimport GraphInteractive from '../d3/bar-chart/graph/GraphInteractive';\r\nimport DisplayInteractions from '../reusable/DisplayInteractions';\r\n\r\nconst BarChartController = () => {\r\n  const graphTypes = ['axis-static', 'axis-animated', 'bars-static', 'bars-animated', 'graph-static', 'graph-animated', 'graph-interactive'];\r\n  const [selectedOption, setSelectedOption] = useState(graphTypes[0]);\r\n  const [data, setData] = useState([]);\r\n\r\n  const getButtonClassName = graphType => `display-control-button${graphType === selectedOption ? ' selected' : ''}`;\r\n\r\n  const createOptionButton = graphType => (\r\n    <button key={graphType} type=\"button\" className={getButtonClassName(graphType)} value={graphType} onClick={() => setSelectedOption(graphType)}>{kebabToWords(graphType)}</button>\r\n  );\r\n\r\n  const getComponent = () => {\r\n    switch (selectedOption) {\r\n      case 'axis-static': return <AxisStatic />;\r\n      case 'axis-animated': return <Axis />;\r\n      case 'bars-static': return <BarsStatic />;\r\n      case 'bars-animated': return <Bars />;\r\n      case 'graph-static': return <GraphStatic />;\r\n      case 'graph-animated': return <Graph />;\r\n      case 'graph-interactive': return <GraphInteractive data={data} />;\r\n      default: return <AxisStatic />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"display-control\">\r\n        {graphTypes.map(createOptionButton)}\r\n      </div>\r\n      <hr />\r\n      <div className=\"display-content\">\r\n        {getComponent()}\r\n      </div>\r\n      <hr />\r\n      <DisplayInteractions shouldDisplay={selectedOption === 'graph-interactive'} data={data} setData={setData} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BarChartController;\r\n","import React, { useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst LinesStatic = () => {\r\n  useEffect(() => {\r\n    drawGraph();\r\n  });\r\n\r\n  const margin = { top: 20, right: 20, bottom: 40, left: 60 };\r\n  const width = 960 - margin.left - margin.right;\r\n  const height = 500 - margin.top - margin.bottom;\r\n\r\n  // Used to draw the graph\r\n  const drawGraph = () => {\r\n    const data = [12, 5, 6, 6, 9, 10];\r\n\r\n    // Create the scaling for the x axis\r\n    const xScale = d3.scaleLinear()\r\n      .domain([0, data.length - 1]) // The range of values to be used for the scale\r\n      .range([0, width]); // The positioning for the scale to range over\r\n\r\n    // Create the scaling for the y axis\r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, d3.max(data)]) // The range of values to be used for the scale\r\n      .range([height, 0]); // The positioning for the scale to range over (reversed to start at bottom-left corner)\r\n\r\n    // Setup the canvas\r\n    const svg = d3.select('#lines-static')\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n        .attr('transform', `translate(${margin.left}, ${margin.top})`);\r\n\r\n    // Create a line generator for drawing to the canvas \r\n    const line = d3.line()\r\n      .x((d, i) => xScale(i)) // Position on x axis according to array index\r\n      .y(d => yScale(d)) // Position on the y axis according to the data value\r\n      .curve(d3.curveMonotoneX); // Apply a curve algorithm for drawing the line\r\n\r\n    // Draw the line on the canvas \r\n    svg.append('path')\r\n      .datum(data) // Apply the dataset to the line\r\n      .attr('d', line) // Apply the line generator to the data\r\n      .attr('fill', 'none') // Don't colour the space under/above the line\r\n      .attr('stroke', 'black') // Set the colour of the line\r\n      .attr('stroke-width', 3.0); // Set how thick the drawn line should be\r\n\r\n    // Add dots at each data point on the line\r\n    svg.selectAll('circle')\r\n      .data(data) // Apply the dataset\r\n      .enter() // Add new data points for any not currently mapped\r\n      .append('circle') // Add a circle for each new data point\r\n        .attr('cx', (d, i) => xScale(i)) // Position on the x axis according to the array index\r\n        .attr('cy', d => yScale(d)) // Position on the y axis according to the data value\r\n        .attr('r', 5); // Set the radius of the circle\r\n  };\r\n\r\n  return <svg id=\"lines-static\" />\r\n};\r\n\r\nexport default LinesStatic;\r\n","import React, { useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst Lines = () => {\r\n  useEffect(() => {\r\n    drawGraph();\r\n\r\n    return () => {\r\n      if (interval) clearInterval(interval);\r\n      timers.forEach(timer => clearTimeout(timer));\r\n    };\r\n  });\r\n\r\n  // Stores timeout IDs to be cleared on component unmount\r\n  const timers = [];\r\n\r\n  const margin = { top: 20, right: 20, bottom: 40, left: 60 };\r\n  const width = 960 - margin.left - margin.right;\r\n  const height = 500 - margin.top - margin.bottom;\r\n\r\n  let oldScale; // Holds the last used scaling to animate the line transitions\r\n\r\n  // Used to draw the initial graph\r\n  const drawGraph = () => {\r\n    const data = [12, 5, 6, 6, 9, 10];\r\n\r\n    // Create the scaling for the x axis\r\n    const xScale = d3.scaleLinear()\r\n      .domain([0, data.length - 1]) // The range of values to be used for the scale\r\n      .range([0, width]); // The positioning for the scale to range over\r\n\r\n    oldScale = xScale; // Set the first scaling as the last used\r\n\r\n    // Create the scaling for the y axis\r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, d3.max(data)]) // The range of values to be used for the scale\r\n      .range([height, 0]); // The positioning for the scale to range over (reversed to start at bottom-left)\r\n\r\n    // Setup the canvas\r\n    const svg = d3.select('#lines')\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n        .attr('transform', `translate(${margin.left}, ${margin.top})`);\r\n    \r\n    // Create a line generator for drawing to the canvas\r\n    const line = d3.line()\r\n      .x((d, i) => xScale(i)) // Position on the x axis according to array index\r\n      .y(d => yScale(d)) // Position on the y axis according to the data value\r\n      .curve(d3.curveMonotoneX); // Apply a curve algorithm for drawing the line\r\n\r\n    // Draw the line on the canvas\r\n    svg.append('path')\r\n      .datum(data) // Apply the dataset to the line\r\n      .attr('class', 'line') // Add a class to select the line later\r\n      .attr('d', line) // Apply the line generator to the data\r\n      .attr('fill', 'none') // Don't colour the space under/above the line\r\n      .attr('stroke', 'black') // Set the colour of the line\r\n      .attr('stroke-width', 3.0); // Set how thick the drawn line should be\r\n\r\n    // Add dots at each data point on the line\r\n    svg.selectAll('circle')\r\n      .data(data) // Apply the dataset\r\n      .enter() // Add new data points\r\n      .append('circle') // Add a circle for each data point\r\n        .attr('cx', (d, i) => xScale(i)) // Position on the x axis according to the array index\r\n        .attr('cy', d => yScale(d)) // Position on the y axis according to the data value\r\n        .attr('r', 5); // Set the radius of the circle\r\n  };\r\n\r\n  // Used to update the line and circles\r\n  const update = data => {\r\n    const svg = d3.select('#lines').select('g');\r\n\r\n    // Update the x scale with the new data set\r\n    const xScale = d3.scaleLinear()\r\n      .domain([0, data.length - 1])\r\n      .range([0, width]);\r\n\r\n    // Update the y scale with the new data set\r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, d3.max(data)])\r\n      .range([height, 0]);\r\n\r\n    // Create the line generator for the new scaling\r\n    const line = d3.line()\r\n      .x((d, i) => xScale(i))\r\n      .y(d => yScale(d))\r\n      .curve(d3.curveMonotoneX);\r\n\r\n    // Create a line generator for the last used scaling to move the line to the bottom of the graph\r\n    const lineFlatOldScale = d3.line()\r\n      .x((d, i) => oldScale(i))\r\n      .y(height)\r\n      .curve(d3.curveMonotoneX);\r\n\r\n    // Create a line generator for the new scaling to draw it at the bottom of the graph\r\n    const lineFlatNewScale = d3.line()\r\n      .x((d, i) => xScale(i))\r\n      .y(height)\r\n      .curve(d3.curveMonotoneX);\r\n\r\n    // Handle the update the line\r\n    svg.select('.line')\r\n      .transition() // Move the line to the bottom of the graph\r\n      .duration(1000)\r\n      .attr('d', lineFlatOldScale) // Uses the old scaling to move the current line without resizing on the axis\r\n      .selection() // Returns the line selection so the data can be updated\r\n      .datum(data) // Apply the new data set\r\n      .transition() // Keep the line flat but now scaled to the new axis\r\n      .duration(0) // Happens instantly, transition is used to apply delay\r\n      .delay(1000)\r\n      .attr('d', lineFlatNewScale) // Uses the new scaling to keep the line flat but rescaled\r\n      .transition() // Move the line up to the new data positions\r\n      .duration(2000)\r\n      .delay(1000)\r\n      .attr('d', line); // Uses the new scaling to move the line up to its final position\r\n\r\n    // Handle removal of circles for excess data points\r\n    svg.selectAll('circle')\r\n      .data(data) // Apply the new data set\r\n      .exit() // Get all data points that are no longer mapped\r\n      .transition() // Start a transition\r\n      .duration(750)\r\n      .attr('r', 0) // Set the radius to 0 so the circle shrinks away\r\n      .remove(); // Remove the element from the canvas\r\n\r\n    // Handle the update of existing data points\r\n    svg.selectAll('circle')\r\n      .data(data) // Apply the new data set\r\n      .transition() // Reduce radius so the data points disappear\r\n      .duration(750)\r\n      .attr('r', 0) // Sets the radius to 0 so the circles appear invisible\r\n      .selection() // Return the selection to escape timing delay behind the last transition\r\n      .transition() // Move the circles to the correct position on the x axis\r\n      .duration(0) // Happens instantly, transition is used to apply delay\r\n      .delay(750)\r\n      .attr('cx', (d, i) => xScale(i)) // Set the x position according to the array index\r\n      .attr('cy', height) // Set the height to the bottom of the graph\r\n      .transition() // Increase the radius to the points appear\r\n      .duration(750)\r\n      .delay(250)\r\n      .attr('r', 5) // Sets the radius to 5 so the circles can be seen again\r\n      .transition() // Move the circles up with the line\r\n      .duration(2000)\r\n      .delay(250)\r\n      .attr('cy', d => yScale(d)); // Set the y position according to the data value\r\n\r\n    // Handle the adding of new data points\r\n    svg.selectAll('circle')\r\n      .data(data) // Apply the new data set\r\n      .enter() // Get all data points that are not currently mapped\r\n      .append('circle') // Add a new circle for each new data point\r\n        .attr('cx', (d, i) => xScale(i)) // Set the x position according to the array index\r\n        .attr('cy', height) // Set the y position to the bottom of the graph\r\n        .attr('r', 0) // Set the radius of the circle to 0 so it can't be seen\r\n        .transition() // Make the circles visible\r\n        .duration(750)\r\n        .delay(1000)\r\n        .attr('r', 5) // Sets the radius to 5 so the circles are visible\r\n        .transition() // Move the circles up with the line\r\n        .duration(2000)\r\n        .delay(250)\r\n        .attr('cy', d => yScale(d)); // Set the y position according to the data value\r\n\r\n    oldScale = xScale; // Set the current scale as the last used scaling\r\n  };\r\n\r\n  // Update the data set, increases data points\r\n  timers.unshift(setTimeout(() => {\r\n    timers.pop();\r\n    update([10, 2, 7, 4, 50, 20, 42, 24, 6, 4, 36, 8]);\r\n  }, 1000));\r\n\r\n  // Update the data set, reduces data points\r\n  timers.unshift(setTimeout(() => {\r\n    timers.pop();\r\n    update([5, 7, 2, 6, 9]);\r\n  }, 5500));\r\n\r\n  // Return to the original data set\r\n  timers.unshift(setTimeout(() => {\r\n    timers.pop();\r\n    update([12, 5, 6, 6, 9, 10]);\r\n  }, 10000));\r\n\r\n  // Runs the animation on a loop\r\n  const interval = setInterval(() => {\r\n    update([10, 2, 7, 4, 50, 20, 42, 24, 6, 4, 36, 8]);\r\n\r\n    timers.unshift(setTimeout(() => {\r\n      timers.pop();\r\n      update([5, 7, 2, 6, 9]);\r\n    }, 4500));\r\n\r\n    timers.unshift(setTimeout(() => {\r\n      timers.pop();\r\n      update([12, 5, 6, 6, 9, 10]);\r\n    }, 9000));\r\n  }, 14500);\r\n\r\n  return <svg id=\"lines\" />\r\n};\r\n\r\nexport default Lines;\r\n","import React, { useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst LinesEntrance = () => {\r\n  useEffect(() => {\r\n    drawGraph();\r\n\r\n    return () => {\r\n      if (interval) clearInterval(interval);\r\n    };\r\n  });\r\n\r\n  const margin = { top: 20, right: 20, bottom: 40, left: 60 };\r\n  const width = 960 - margin.left - margin.right;\r\n  const height = 500 - margin.top - margin.bottom;\r\n\r\n  // Used to draw the graph\r\n  const drawGraph = () => {\r\n    const data = [12, 5, 6, 6, 9, 10];\r\n\r\n    // Create the scaling for the x axis\r\n    const xScale = d3.scaleLinear()\r\n      .domain([0, data.length - 1]) // The range of values to be used for the scale\r\n      .range([0, width]); // The positioning for the scale to range over\r\n\r\n    // Create the scaling for the y axis\r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, d3.max(data)]) // The range of values to be used for the scale\r\n      .range([height, 0]); // The positioning for the scale to range over\r\n\r\n    // Setup the canvas\r\n    const svg = d3.select('#lines-entrance')\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n        .attr('transform', `translate(${margin.left}, ${margin.top})`);\r\n\r\n    // Create a line generator for drawing to the canvas\r\n    const line = d3.line()\r\n      .x((d, i) => xScale(i)) // Position on the x axis according to array index\r\n      .y(d => yScale(d)) // Position on the y axis according to the data value\r\n      .curve(d3.curveMonotoneX); // Apply a curve algorithm for drawing the line\r\n\r\n    // Draw dots at each data point\r\n    svg.selectAll('circle')\r\n      .data(data) // Apply the data set\r\n      .enter() // Add new data points\r\n      .append('circle') // Add a circle for each data point\r\n        .attr('cx', (d, i) => xScale(i)) // Position on the x axis according to the array index\r\n        .attr('cy', d => yScale(d)) // Position on the y axis according to the data value\r\n        .transition() // Start a transition\r\n        .duration(1000)\r\n        .attr('r', 5); // Increase the radius so the circle grows\r\n\r\n    // Draw the line on the canvas\r\n    svg.append('path')\r\n      .datum(data) // Apply the data set\r\n      .attr('class', 'line') // Add a class to select later\r\n      .attr('d', line) // Apply the line generator to the data\r\n      .attr('fill', 'none') // Don't colour the space under/above the line\r\n      .attr('stroke', 'black') // Set the colour of the line\r\n      .attr('stroke-width', 3.0) // Set how thick the drawn line should be\r\n      .attr('stroke-dasharray', svg.select('.line').node().getTotalLength()) // Makes the line dashed, dashes are set to the total length of the line so the line is still one whole\r\n      .attr('stroke-dashoffset', svg.select('.line').node().getTotalLength()) // Offsets the dashes by the length of the line, makes the line appear to not be drawn\r\n      .transition() // Start a transition\r\n      .duration(2000)\r\n      .delay(1000) // Run after the circles have finished animating\r\n      .attr('stroke-dashoffset', 0); // Reduce the offset to 0 so that the line dash becomes totally visible\r\n  };\r\n\r\n  // Used to loop the animation\r\n  const update = () => {\r\n    const svg = d3.select('#lines-entrance').select('g');\r\n\r\n    // Make the circles disappear and reappear again\r\n    svg.selectAll('circle')\r\n      .attr('r', 0) // No radius so the circles can't be seen\r\n      .transition()\r\n      .duration(1000)\r\n      .attr('r', 5); // Increase the radius again to make the circles visible\r\n\r\n    // Make the line disappear and reappear again\r\n    svg.select('.line')\r\n      .attr('stroke-dashoffset', svg.select('.line').node().getTotalLength()) // Increase stroke offset so the line disappears\r\n      .transition()\r\n      .duration(2000)\r\n      .delay(1000)\r\n      .attr('stroke-dashoffset', 0); // Reduce the stroke offset again so the line reappears\r\n  };\r\n\r\n  // Loops the animation\r\n  const interval = setInterval(() => {\r\n    update();\r\n  }, 3750);\r\n\r\n  return <svg id=\"lines-entrance\" />\r\n};\r\n\r\nexport default LinesEntrance;\r\n","import React, { useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst GraphStatic = () => {\r\n  useEffect(() => {\r\n    drawGraph();\r\n  });\r\n\r\n  const margin = { top: 20, right: 20, bottom: 40, left: 60 };\r\n  const width = 960 - margin.left - margin.right;\r\n  const height = 500 - margin.top - margin.bottom;\r\n\r\n  // Used to draw the graph\r\n  const drawGraph = () => {\r\n    const data = [12, 5, 6, 6, 9, 10];\r\n\r\n    // Setup the canvas\r\n    const svg = d3.select('#lines-graph-static')\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n        .attr('transform', `translate(${margin.left}, ${margin.top})`);\r\n\r\n    // SCALES\r\n\r\n    // Create the scaling for the x axis\r\n    const xScale = d3.scaleLinear()\r\n      .domain([0, data.length - 1])\r\n      .range([0, width]);\r\n\r\n    // Create the scaling for the y axis\r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, d3.max(data)])\r\n      .range([height, 0]);\r\n\r\n    // AXIS\r\n\r\n    // Create the x axis\r\n    svg.append('g')\r\n      .attr('transform', `translate(0, ${height})`)\r\n      .call(d3.axisBottom(xScale)\r\n        .ticks(data.length)\r\n      );\r\n\r\n    // Create the y axis\r\n    svg.append('g')\r\n      .call(d3.axisLeft(yScale));\r\n\r\n    // Add text to the x axis\r\n    svg.append('text')\r\n      .attr('text-anchor', 'end')\r\n      .attr('x', width)\r\n      .attr('y', height + margin.top + 20)\r\n      .text('X Axis');\r\n\r\n    // Add text to the y axis\r\n    svg.append('text')\r\n      .attr('text-anchor', 'end')\r\n      .attr('transform', 'rotate(-90)')\r\n      .attr('y', -margin.left + 20)\r\n      .attr('x', -margin.top)\r\n      .text('Y Axis');\r\n\r\n    // LINE & DOTS\r\n\r\n    // Create the line generator for drawing\r\n    const line = d3.line()\r\n      .x((d, i) => xScale(i))\r\n      .y(d => yScale(d))\r\n      .curve(d3.curveMonotoneX);\r\n\r\n    // Create the line from the data\r\n    svg.append('path')\r\n      .datum(data)\r\n      .attr('d', line)\r\n      .attr('fill', 'none')\r\n      .attr('stroke', 'black')\r\n      .attr('stroke-width', 3.0);\r\n\r\n    // Draw circles at each data point\r\n    svg.selectAll('circle')\r\n      .data(data)\r\n      .enter()\r\n      .append('circle')\r\n        .attr('cx', (d, i) => xScale(i))\r\n        .attr('cy', d => yScale(d))\r\n        .attr('r', 5);\r\n  };\r\n\r\n  return <svg id=\"lines-graph-static\" />\r\n};\r\n\r\nexport default GraphStatic;\r\n","import React, { useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst Graph = () => {\r\n  useEffect(() => {\r\n    drawGraph();\r\n\r\n    return () => {\r\n      if (interval) clearInterval(interval);\r\n      timers.forEach(timer => clearTimeout(timer));\r\n    };\r\n  });\r\n\r\n  // Store timeout IDs to be cleared on component unmount\r\n  const timers = [];\r\n\r\n  const margin = { top: 20, right: 20, bottom: 40, left: 60 };\r\n  const width = 960 - margin.left - margin.right;\r\n  const height = 500 - margin.top - margin.bottom;\r\n\r\n  let oldScale; // Used to animate the line transitions\r\n\r\n  // Used to draw the initial graph\r\n  const drawGraph = () => {\r\n    const data = [12, 5, 6, 6, 9, 10];\r\n\r\n    // Setup the canvas\r\n    const svg = d3.select('#lines-graph')\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n        .attr('transform', `translate(${margin.left}, ${margin.top})`);\r\n\r\n    // SCALES\r\n\r\n    // Create the scaling for the x axis\r\n    const xScale = d3.scaleLinear()\r\n      .domain([0, data.length - 1])\r\n      .range([0, width]);\r\n\r\n    oldScale = xScale; // Update the last used scale reference\r\n\r\n    // Create the scaling for the y axis\r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, d3.max(data)])\r\n      .range([height, 0]);\r\n\r\n    // AXIS\r\n\r\n    // Create the x axis\r\n    svg.append('g')\r\n      .attr('class', 'xAxis')\r\n      .attr('transform', `translate(0, ${height})`)\r\n      .call(d3.axisBottom(xScale)\r\n        .ticks(data.length)\r\n      );\r\n\r\n    // Create the y axis\r\n    svg.append('g')\r\n      .attr('class', 'yAxis')\r\n      .call(d3.axisLeft(yScale));\r\n\r\n    // Add text to the x axis\r\n    svg.append('text')\r\n      .attr('text-anchor', 'end')\r\n      .attr('x', width)\r\n      .attr('y', height + margin.top + 20)\r\n      .text('X Axis');\r\n\r\n    // Add text to the y axis\r\n    svg.append('text')\r\n      .attr('text-anchor', 'end')\r\n      .attr('transform', 'rotate(-90)')\r\n      .attr('y', -margin.left + 20)\r\n      .attr('x', -margin.top)\r\n      .text('Y Axis');\r\n\r\n    // LINE & DOTS\r\n\r\n    // Create the line generator for drawing\r\n    const line = d3.line()\r\n      .x((d, i) => xScale(i))\r\n      .y(d => yScale(d))\r\n      .curve(d3.curveMonotoneX);\r\n\r\n    // Create the line from the data\r\n    svg.append('path')\r\n      .datum(data)\r\n      .attr('class', 'line')\r\n      .attr('d', line)\r\n      .attr('fill', 'none')\r\n      .attr('stroke', 'black')\r\n      .attr('stroke-width', 3.0);\r\n\r\n    // Draw circles at each data point\r\n    svg.selectAll('circle')\r\n      .data(data)\r\n      .enter()\r\n      .append('circle')\r\n        .attr('cx', (d, i) => xScale(i))\r\n        .attr('cy', d => yScale(d))\r\n        .attr('r', 5);\r\n  };\r\n\r\n  // Used to update the lines and circles\r\n  const update = data => {\r\n    const svg = d3.select('#lines-graph').select('g');\r\n\r\n    // SCALES\r\n\r\n    // Update the x scale with the new data set\r\n    const xScale = d3.scaleLinear()\r\n      .domain([0, data.length - 1])\r\n      .range([0, width]);\r\n\r\n    // Update the y scale with the new data set\r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, d3.max(data)])\r\n      .range([height, 0]);\r\n\r\n    // AXIS\r\n\r\n    // Update the x axis with the new scaling\r\n    svg.select('.xAxis')\r\n      .transition() // Start a transition\r\n      .duration(1000) // Moves with the line moving to the bottom of the graph\r\n      .delay(500)\r\n      .call(d3.axisBottom(xScale) // Update the scaling\r\n        .ticks(data.length) // Update the number of ticks to draw\r\n      );\r\n\r\n    // Update the y axis with the new scaling\r\n    svg.select('.yAxis')\r\n      .transition() // Start a transition\r\n      .duration(2000) // Moves with the line moving up from the bottom of the graph\r\n      .delay(2000)\r\n      .call(d3.axisLeft(yScale)); // Update the scaling\r\n\r\n    // LINE & DOTS\r\n\r\n    // Create the line generator\r\n    const line = d3.line()\r\n      .x((d, i) => xScale(i))\r\n      .y(d => yScale(d))\r\n      .curve(d3.curveMonotoneX);\r\n\r\n    // Create a line generator for the last used scaling to move the line to the bottom of the graph\r\n    const lineFlatOldScale = d3.line()\r\n      .x((d, i) => oldScale(i))\r\n      .y(height)\r\n      .curve(d3.curveMonotoneX);\r\n\r\n    // Create a line generator for the new scaling to draw the line at the bottom of the graph\r\n    const lineFlatNewScale = d3.line()\r\n      .x((d, i) => xScale(i))\r\n      .y(height)\r\n      .curve(d3.curveMonotoneX);\r\n\r\n    // Handle the update of the line\r\n    svg.select('.line')\r\n      .transition() // Move the line to the bottom of the graph\r\n      .duration(1000)\r\n      .attr('d', lineFlatOldScale) // Uses the old scaling to move the current line without resizing on the axis\r\n      .selection() // Returns the line selection so the data can be updated\r\n      .datum(data) // Apply the new data set\r\n      .transition() // Keep the line flat but now scaled to the new axis\r\n      .duration(0) // Happens instantly, transition is used to apply delay\r\n      .delay(1000)\r\n      .attr('d', lineFlatNewScale) // Uses the new scaling to keep the line flat but rescaled\r\n      .transition() // Move the line up to the new data positions\r\n      .duration(2000)\r\n      .delay(1000)\r\n      .attr('d', line); // Uses the new scaling to move the line up to its final position\r\n\r\n    // Handle removal of circles for excess data points\r\n    svg.selectAll('circle')\r\n      .data(data) // Apply the new data set\r\n      .exit() // Get all data points that are no longer mapped\r\n      .transition() // Start a transition\r\n      .duration(750)\r\n      .attr('r', 0) // Set the radius to 0 so the circle shrinks away\r\n      .remove(); // Remove the element from the canvas\r\n\r\n    // Handle the update of existing data points\r\n    svg.selectAll('circle')\r\n      .data(data) // Apply the new data set\r\n      .transition() // Reduces radius so the data points disappear\r\n      .duration(750)\r\n      .attr('r', 0) // Sets the radius to 0 so the circles appear invisible\r\n      .selection() // Returns the selection to escape timing delay behind the last transition\r\n      .transition() // Moves the circles to the correct position on the x axis\r\n      .duration(0) // Happens instantly, transition is used to apply delay\r\n      .delay(750)\r\n      .attr('cx', (d, i) => xScale(i)) // Set the x position according to the array index\r\n      .attr('cy', height) // Set the height to the bottom of the graph\r\n      .transition() // Increase the radius so the points appear\r\n      .duration(750)\r\n      .delay(250)\r\n      .attr('r', 5) // Sets the radius to 5 so the circles can be seen again\r\n      .transition() // Moves the circles up with the line\r\n      .duration(2000)\r\n      .delay(250)\r\n      .attr('cy', d => yScale(d)); // Set the y position according to the data value\r\n\r\n    // Handle the adding of new data points\r\n    svg.selectAll('circle')\r\n      .data(data) // Apply the new data set\r\n      .enter() // Get all data points that are not currently mapped\r\n      .append('circle') // Add a new circle for each new data point\r\n        .attr('cx', (d, i) => xScale(i)) // Set the x position according to the array index\r\n        .attr('cy', height) // Set the y position to the bottom of the graph\r\n        .attr('r', 0) // Set the radius of the circle to 0 so it can't be seen\r\n        .transition() // Make the circles visible\r\n        .duration(750)\r\n        .delay(1000)\r\n        .attr('r', 5) // Sets the radius to 5 so the circles are visible\r\n        .transition() // Move the circles up with the line\r\n        .duration(2000)\r\n        .delay(250)\r\n        .attr('cy', d => yScale(d)); // Set the y position according to the data value\r\n\r\n    oldScale = xScale; // Update the last used scale reference\r\n  };\r\n\r\n  // Update the data set, increases data points\r\n  timers.unshift(setTimeout(() => {\r\n    timers.pop();\r\n    update([10, 2, 7, 4, 50, 20, 42, 24, 6, 4, 36, 8]);\r\n  }, 1000));\r\n\r\n  // Update the data set, reduces data points\r\n  timers.unshift(setTimeout(() => {\r\n    timers.pop();\r\n    update([5, 7, 2, 6, 9]);\r\n  }, 5500));\r\n\r\n  // Return to the original data set\r\n  timers.unshift(setTimeout(() => {\r\n    timers.pop();\r\n    update([12, 5, 6, 6, 9, 10]);\r\n  }, 10000));\r\n\r\n  // Runs the animation on a loop\r\n  const interval = setInterval(() => {\r\n    update([10, 2, 7, 4, 50, 20, 42, 24, 6, 4, 36, 8]);\r\n\r\n    timers.unshift(setTimeout(() => {\r\n      timers.pop();\r\n      update([5, 7, 2, 6, 9]);\r\n    }, 4500));\r\n\r\n    timers.unshift(setTimeout(() => {\r\n      timers.pop();\r\n      update([12, 5, 6, 6, 9, 10]);\r\n    }, 9000));\r\n  }, 14500);\r\n\r\n  return <svg id=\"lines-graph\" />\r\n};\r\n\r\nexport default Graph;\r\n","import React, { useEffect, useState } from 'react';\r\nimport * as d3 from 'd3';\r\nimport arrayEquals from '../../../utilities/arrayEquals';\r\n\r\nconst GraphInteractive = ({ data }) => {\r\n  const [oldScale, setOldScale] = useState(() => () => null);\r\n  const [oldData, setOldData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    drawGraph();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!arrayEquals(data, oldData)) {\r\n      setOldData(data);\r\n      update(data);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [data]);\r\n\r\n  const margin = { top: 20, right: 20, bottom: 40, left: 60 };\r\n  const width = 960 - margin.left - margin.right;\r\n  const height = 500 - margin.top - margin.bottom;\r\n\r\n  const drawGraph = () => {\r\n    const svg = d3.select('#lines-graph-interactive')\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n        .attr('transform', `translate(${margin.left}, ${margin.top})`);\r\n\r\n    const xScale = d3.scaleLinear()\r\n      .domain([0, data.length - 1])\r\n      .range([0, width]);\r\n\r\n    setOldScale(() => xScale)\r\n\r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, d3.max(data)])\r\n      .range([height, 0]);\r\n\r\n    svg.append('g')\r\n      .attr('class', 'xAxis')\r\n      .attr('transform', `translate(0, ${height})`)\r\n      .call(d3.axisBottom(xScale)\r\n        .ticks(data.length)\r\n      );\r\n\r\n    svg.append('g')\r\n      .attr('class', 'yAxis')\r\n      .call(d3.axisLeft(yScale));\r\n\r\n    svg.append('text')\r\n      .attr('text-anchor', 'end')\r\n      .attr('x', width)\r\n      .attr('y', height + margin.top + 20)\r\n      .text('X Axis');\r\n\r\n    svg.append('text')\r\n      .attr('text-anchor', 'end')\r\n      .attr('transform', 'rotate(-90)')\r\n      .attr('y', -margin.left + 20)\r\n      .attr('x', -margin.top)\r\n      .text('Y Axis');\r\n\r\n    svg.append('path')\r\n      .datum(data)\r\n      .attr('class', 'line')\r\n      .attr('fill', 'none')\r\n      .attr('stroke', 'black')\r\n      .attr('stroke-width', 3.0);\r\n  };\r\n\r\n  const update = data => {\r\n    const svg = d3.select('#lines-graph-interactive').select('g');\r\n\r\n    const xScale = d3.scaleLinear()\r\n      .domain([0, data.length - 1])\r\n      .range([0, width]);\r\n\r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, d3.max(data)])\r\n      .range([height, 0]);\r\n\r\n    svg.select('.xAxis')\r\n      .transition()\r\n      .duration(1000)\r\n      .delay(500)\r\n      .call(d3.axisBottom(xScale)\r\n        .ticks(data.length)\r\n      );\r\n\r\n    svg.select('.yAxis')\r\n      .transition()\r\n      .duration(2000)\r\n      .delay(2000)\r\n      .call(d3.axisLeft(yScale));\r\n\r\n    const line = d3.line()\r\n      .x((d, i) => xScale(i))\r\n      .y(d => yScale(d))\r\n      .curve(d3.curveMonotoneX);\r\n\r\n    const lineFlatOldScale = d3.line()\r\n      .x((d, i) => oldScale(i))\r\n      .y(height)\r\n      .curve(d3.curveMonotoneX);\r\n\r\n    const lineFlatNewScale = d3.line()\r\n      .x((d, i) => xScale(i))\r\n      .y(height)\r\n      .curve(d3.curveMonotoneX);\r\n\r\n    svg.select('.line')\r\n      .transition()\r\n      .duration(1000)\r\n      .attr('d', lineFlatOldScale)\r\n      .selection()\r\n      .datum(data)\r\n      .transition()\r\n      .duration(0)\r\n      .delay(1000)\r\n      .attr('d', lineFlatNewScale)\r\n      .transition()\r\n      .duration(2000)\r\n      .delay(1000)\r\n      .attr('d', line);\r\n\r\n    svg.selectAll('circle')\r\n      .data(data)\r\n      .exit()\r\n      .transition()\r\n      .duration(750)\r\n      .attr('r', 0)\r\n      .remove();\r\n\r\n    svg.selectAll('circle')\r\n      .data(data)\r\n      .transition()\r\n      .duration(750)\r\n      .attr('r', 0)\r\n      .selection()\r\n      .transition()\r\n      .duration(0)\r\n      .delay(750)\r\n      .attr('cx', (d, i) => xScale(i))\r\n      .attr('cy', height)\r\n      .transition()\r\n      .duration(750)\r\n      .delay(250)\r\n      .attr('r', 5)\r\n      .transition()\r\n      .duration(2000)\r\n      .delay(250)\r\n      .attr('cy', d => yScale(d));\r\n\r\n    svg.selectAll('circle')\r\n      .data(data)\r\n      .enter()\r\n      .append('circle')\r\n        .attr('cx', (d, i) => xScale(i))\r\n        .attr('cy', height)\r\n        .attr('r', 0)\r\n        .transition()\r\n        .duration(750)\r\n        .delay(1000)\r\n        .attr('r', 5)\r\n        .transition()\r\n        .duration(2000)\r\n        .delay(250)\r\n        .attr('cy', d => yScale(d));\r\n\r\n    setOldScale(() => xScale)\r\n  };\r\n\r\n  return <svg id=\"lines-graph-interactive\" />\r\n};\r\n\r\nexport default GraphInteractive;\r\n","export default (arr1, arr2) => {\r\n  if (arr1 === arr2) return true;\r\n  if (arr1.length !== arr2.length) return false;\r\n  return arr1.every((val, index) => val === arr2[index]);\r\n};\r\n","import React, { useState } from 'react';\r\nimport kebabToWords from '../utilities/kebabToWords';\r\nimport LinesStatic from '../d3/line-graph/lines/LinesStatic';\r\nimport Lines from '../d3/line-graph/lines/Lines';\r\nimport LinesEntrance from '../d3/line-graph/lines/LinesEntrance';\r\nimport GraphStatic from '../d3/line-graph/graph/GraphStatic';\r\nimport Graph from '../d3/line-graph/graph/Graph';\r\nimport GraphInteractive from '../d3/line-graph/graph/GraphInteractive';\r\nimport DisplayInteractions from '../reusable/DisplayInteractions';\r\n\r\nconst LineGraphController = () => {\r\n  const graphTypes = ['lines-static', 'lines-entrance', 'lines-animated', 'graph-static', 'graph-animated', 'graph-interactive'];\r\n  const [selectedOption, setSelectedOption] = useState(graphTypes[0]);\r\n  const [data, setData] = useState([]);\r\n\r\n  const getButtonClassName = graphType => `display-control-button${graphType === selectedOption ? ' selected' : ''}`;\r\n\r\n  const createOptionButton = graphType => (\r\n    <button key={graphType} type=\"button\" className={getButtonClassName(graphType)} value={graphType} onClick={() => setSelectedOption(graphType)}>{kebabToWords(graphType)}</button>\r\n  );\r\n\r\n  const getComponent = () => {\r\n    switch (selectedOption) {\r\n      case 'lines-static': return <LinesStatic />;\r\n      case 'lines-entrance': return <LinesEntrance />;\r\n      case 'lines-animated': return <Lines />;\r\n      case 'graph-static': return <GraphStatic />;\r\n      case 'graph-animated': return <Graph />;\r\n      case 'graph-interactive': return <GraphInteractive data={data} />;\r\n      default: return <LinesStatic />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"display-control\">\r\n        {graphTypes.map(createOptionButton)}\r\n      </div>\r\n      <hr />\r\n      <div className=\"display-content\">\r\n        {getComponent()}\r\n      </div>\r\n      <hr />\r\n      <DisplayInteractions shouldDisplay={selectedOption === 'graph-interactive'} data={data} setData={setData} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LineGraphController;\r\n","import React, { useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst PieStatic = () => {\r\n  useEffect(() => {\r\n    drawGraph();\r\n  });\r\n\r\n  const margin = { top: 20, right: 20, bottom: 40, left: 60 };\r\n  const width = 960 - margin.left - margin.right;\r\n  const height = 500 - margin.top - margin.bottom;\r\n\r\n  const drawGraph = () => {\r\n    const data = [12, 5, 6, 6, 9, 10];\r\n    const radius = Math.min(width, height) / 2 - 20;\r\n\r\n    const svg = d3.select('#pie-static')\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n        .attr('transform', `translate(${width / 2}, ${height / 2})`);\r\n\r\n    const colour = d3.scaleLinear()\r\n      .domain([1, d3.max(data)])\r\n      .range(['orange', 'purple']);\r\n\r\n    const pie = d3.pie()\r\n      .value(d => d)\r\n      .sort(null);\r\n    \r\n    const dataReady = pie(data);\r\n\r\n    svg.selectAll('slices')\r\n      .data(dataReady)\r\n      .enter()\r\n      .append('path')\r\n        .attr('d', d3.arc()\r\n          .innerRadius(0)\r\n          .outerRadius(radius)\r\n        )\r\n        .attr('fill', d => colour(d.value))\r\n        .attr('stroke', 'black')\r\n        .style('stroke-width', '2px')\r\n        .style('opacity', 0.7);\r\n  };\r\n\r\n  return <svg id=\"pie-static\" />\r\n};\r\n\r\nexport default PieStatic;\r\n","import React, { useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst Pie = () => {\r\n  useEffect(() => {\r\n    drawGraph();\r\n\r\n    return () => {\r\n      if (interval) clearInterval(interval);\r\n      timers.forEach(timer => clearTimeout(timer));\r\n    };\r\n  });\r\n\r\n  const timers = [];\r\n\r\n  const margin = { top: 20, right: 20, bottom: 40, left: 60 };\r\n  const width = 960 - margin.left - margin.right;\r\n  const height = 500 - margin.top - margin.bottom;\r\n\r\n  const currentAngles = [];\r\n  const radius = Math.min(width, height) / 2 - 20;\r\n  const graphEnd = Math.PI * 2;\r\n\r\n  const arc = d3.arc()\r\n    .innerRadius(0)\r\n    .outerRadius(radius);\r\n\r\n  const pie = d3.pie()\r\n    .value(d => d)\r\n    .sort(null);\r\n\r\n  const arcTween = (d, i) => {\r\n    const interpolate = d3.interpolate(currentAngles[i], d);\r\n    currentAngles[i] = interpolate(1);\r\n    return t => arc(interpolate(t));\r\n  };\r\n\r\n  const arcTweenRemove = (d) => {\r\n    const end = Object.assign({}, d, { startAngle: graphEnd, endAngle: graphEnd });\r\n    const interpolate = d3.interpolate(d, end);\r\n    return t => arc(interpolate(t));\r\n  };\r\n  \r\n  const drawGraph = () => {\r\n    const data = [12, 5, 6, 6, 9, 10];\r\n\r\n    const svg = d3.select('#pie-animated')\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n        .attr('transform', `translate(${width / 2}, ${height / 2})`);\r\n\r\n    const colour = d3.scaleLinear()\r\n      .domain([1, d3.max(data)])\r\n      .range(['orange', 'purple']);\r\n\r\n    svg.selectAll('.slice')\r\n      .data(pie(data))\r\n      .enter()\r\n      .append('path')\r\n        .attr('class', 'slice')\r\n        .attr('d', arc)\r\n        .each(d => currentAngles[d.index] = d)\r\n        .attr('fill', d => colour(d.value))\r\n        .attr('stroke', 'black')\r\n        .style('stroke-width', '2px')\r\n        .style('opacity', 0.7);\r\n  };\r\n\r\n  const update = (data) => {\r\n    const svg = d3.select('#pie-animated').select('g');\r\n\r\n    const colour = d3.scaleLinear()\r\n      .domain([1, d3.max(data)])\r\n      .range(['orange', 'purple']);\r\n      \r\n    const dataReady = pie(data);\r\n\r\n    svg.selectAll('.slice')\r\n      .data(dataReady)\r\n      .exit()\r\n      .transition()\r\n      .duration(2000)\r\n      .attrTween('d', arcTweenRemove)\r\n      .attr('fill', 'orange')\r\n      .remove();\r\n\r\n    svg.selectAll('.slice')\r\n      .data(dataReady)\r\n      .transition()\r\n      .duration(2000)\r\n      .attrTween('d', arcTween)\r\n      .attr('fill', d => colour(d.value));\r\n\r\n    svg.selectAll('.slice')\r\n      .data(dataReady)\r\n      .enter()\r\n      .append('path')\r\n        .attr('class', 'slice')\r\n        .attr('d', d => {\r\n          currentAngles[d.index] = Object.assign({}, d, { startAngle: graphEnd, endAngle: graphEnd });\r\n          return arc(currentAngles[d.index]);\r\n        })\r\n        .attr('fill', 'orange')\r\n        .attr('stroke', 'black')\r\n        .style('stroke-width', '2px')\r\n        .style('opacity', 0.7)\r\n        .transition()\r\n        .duration(2000)\r\n        .attrTween('d', arcTween)\r\n        .attr('fill', d => colour(d.value));\r\n  };\r\n\r\n  timers.unshift(setTimeout(() => {\r\n    timers.pop();\r\n    update([10, 2, 7, 4, 50, 20, 42, 24, 6, 4, 36, 8]);\r\n  }, 1000));\r\n\r\n  timers.unshift(setTimeout(() => {\r\n    timers.pop();\r\n    update([5, 7, 2, 6, 9]);\r\n  }, 4000));\r\n\r\n  timers.unshift(setTimeout(() => {\r\n    timers.pop();\r\n    update([12, 5, 6, 6, 9, 10]);\r\n  }, 7000));\r\n\r\n  const interval = setInterval(() => {\r\n    update([10, 2, 7, 4, 50, 20, 42, 24, 6, 4, 36, 8]);\r\n\r\n    timers.unshift(setTimeout(() => {\r\n      timers.pop();\r\n      update([5, 7, 2, 6, 9]);\r\n    }, 3000));\r\n\r\n    timers.unshift(setTimeout(() => {\r\n      timers.pop();\r\n      update([12, 5, 6, 6, 9, 10]);\r\n    }, 6000));\r\n  }, 9500);\r\n\r\n  return <svg id=\"pie-animated\" />\r\n};\r\n\r\nexport default Pie;\r\n","import React, { useEffect, useState } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst PieInteractive = ({ data }) => {\r\n  useEffect(() => {\r\n    drawGraph();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    update(data);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [data]);\r\n\r\n  const margin = { top: 20, right: 20, bottom: 40, left: 60 };\r\n  const width = 960 - margin.left - margin.right;\r\n  const height = 500 - margin.top - margin.bottom;\r\n\r\n  const [currentAngles] = useState([]);\r\n  const radius = Math.min(width, height) / 2 - 20;\r\n  const graphEnd = Math.PI * 2;\r\n\r\n  const arc = d3.arc()\r\n    .innerRadius(0)\r\n    .outerRadius(radius);\r\n\r\n  const pie = d3.pie()\r\n    .value(d => d)\r\n    .sort(null);\r\n\r\n  const arcTween = (d, i) => {\r\n    const interpolate = d3.interpolate(currentAngles[i], d);\r\n    currentAngles[i] = interpolate(1);\r\n    return t => arc(interpolate(t));\r\n  };\r\n\r\n  const arcTweenRemove = (d) => {\r\n    const end = Object.assign({}, d, { startAngle: graphEnd, endAngle: graphEnd });\r\n    const interpolate = d3.interpolate(d, end);\r\n    return t => arc(interpolate(t));\r\n  };\r\n\r\n  const drawGraph = () => {\r\n    d3.select('#pie-interactive')\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n        .attr('transform', `translate(${width / 2}, ${height / 2})`);\r\n  };\r\n\r\n  const update = (data) => {\r\n    const svg = d3.select('#pie-interactive').select('g');\r\n\r\n    const colour = d3.scaleLinear()\r\n      .domain([1, d3.max(data)])\r\n      .range(['orange', 'purple']);\r\n\r\n    const dataReady = pie(data);\r\n\r\n    svg.selectAll('.slice')\r\n      .data(dataReady)\r\n      .exit()\r\n      .transition()\r\n      .duration(2000)\r\n      .attrTween('d', arcTweenRemove)\r\n      .attr('fill', 'orange')\r\n      .remove();\r\n\r\n    svg.selectAll('.slice')\r\n      .data(dataReady)\r\n      .transition()\r\n      .duration(2000)\r\n      .attrTween('d', arcTween)\r\n      .attr('fill', d => colour(d.value));\r\n\r\n    svg.selectAll('.slice')\r\n      .data(dataReady)\r\n      .enter()\r\n      .append('path')\r\n        .attr('class', 'slice')\r\n        .attr('d', d => {\r\n          currentAngles[d.index] = Object.assign({}, d, { startAngle: graphEnd, endAngle: graphEnd });\r\n          return arc(currentAngles[d.index]);\r\n        })\r\n        .attr('fill', 'orange')\r\n        .attr('stroke', 'black')\r\n        .style('stroke-width', '2px')\r\n        .style('opacity', 0.7)\r\n        .transition()\r\n        .duration(2000)\r\n        .attrTween('d', arcTween)\r\n        .attr('fill', d => colour(d.value));\r\n  };\r\n\r\n  return <svg id=\"pie-interactive\" />\r\n};\r\n\r\nexport default PieInteractive;\r\n","import React, { useState } from 'react';\r\nimport kebabToWords from '../utilities/kebabToWords';\r\nimport PieStatic from '../d3/pie-chart/PieStatic';\r\nimport Pie from '../d3/pie-chart/Pie';\r\nimport PieInteractive from '../d3/pie-chart/PieInteractive';\r\nimport DisplayInteractions from '../reusable/DisplayInteractions';\r\n\r\nconst PieChartController = () => {\r\n  const graphTypes = ['pie-static', 'pie-animated', 'pie-interactive'];\r\n  const [selectedOption, setSelectedOption] = useState(graphTypes[0]);\r\n  const [data, setData] = useState([]);\r\n\r\n  const getButtonClassName = graphType => `display-control-button${graphType === selectedOption ? ' selected': ''}`;\r\n\r\n  const createOptionButton = graphType => (\r\n    <button key={graphType} type=\"button\" className={getButtonClassName(graphType)} value={graphType} onClick={() => setSelectedOption(graphType)}>{kebabToWords(graphType)}</button>\r\n  );\r\n\r\n  const getComponent = () => {\r\n    switch (selectedOption) {\r\n      case 'pie-static': return <PieStatic />;\r\n      case 'pie-animated': return <Pie />;\r\n      case 'pie-interactive': return <PieInteractive data={data} />;\r\n      default: return <PieStatic />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"display-control\">\r\n        {graphTypes.map(createOptionButton)}\r\n      </div>\r\n      <hr />\r\n      <div className=\"display-content\">\r\n        {getComponent()}\r\n      </div>\r\n      <hr />\r\n      <DisplayInteractions shouldDisplay={selectedOption === 'pie-interactive'} data={data} setData={setData} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PieChartController;\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport kebabToWords from '../utilities/kebabToWords';\r\nimport BarChartController from '../controllers/BarChartController';\r\nimport LineGraphController from '../controllers/LineGraphController';\r\nimport PieChartController from '../controllers/PieChartController';\r\n\r\nconst App = () => {\r\n  const graphTypes = ['bar-chart', 'line-graph', 'pie-chart'];\r\n  const [selectedOption, setSelectedOption] = useState(graphTypes[0]);\r\n\r\n  const getComponent = () => {\r\n    switch (selectedOption) {\r\n      case 'bar-chart': return <BarChartController />;\r\n      case 'line-graph': return <LineGraphController />;\r\n      case 'pie-chart': return <PieChartController />;\r\n      default: return <BarChartController />;\r\n    }\r\n  };\r\n\r\n  const getButtonClassName = graphType => `display-control-button main-chart-control${graphType === selectedOption ? ' selected' : ''}`;\r\n\r\n  const createOptionButton = graphType => (\r\n    <button key={graphType} type=\"button\" className={getButtonClassName(graphType)} value={graphType} onClick={() => setSelectedOption(graphType)}>{kebabToWords(graphType)}</button>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div className=\"display-container\">\r\n        {getComponent()}\r\n      </div>\r\n      <div className=\"graph-control\">\r\n        {graphTypes.map(createOptionButton)}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}